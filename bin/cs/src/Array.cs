// Generated by Haxe 4.3.4

#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class Array<T> : global::haxe.lang.HxObject, global::Array {
	
	static bool __hx_init_called = false;
	static Array() {
		if(global::Array<object>.__hx_init_called) return;
		global::Array<object>.__hx_init_called = true;
		unchecked{
			#line 34 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			global::Array<object>.__hx_toString_depth = 0;
			global::Array<object>.__hx_defaultCapacity = 4;
		}
		
	}
	#line default
	
	public Array(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Array(T[] native) {
		#line 62 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		global::Array<object>.__hx_ctor__Array<T>(((global::Array<T>) (this) ), ((T[]) (native) ));
	}
	#line default
	
	public Array() {
		#line 51 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		global::Array<object>.__hx_ctor__Array<T>(((global::Array<T>) (this) ));
	}
	#line default
	
	private static void __hx_ctor__Array<T_c>(global::Array<T_c> __hx_this, T_c[] native) {
		#line 63 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		__hx_this.length = ( native as global::System.Array ).Length;
		__hx_this.__a = native;
	}
	#line default
	
	private static void __hx_ctor__Array<T_c>(global::Array<T_c> __hx_this) {
		#line 52 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		__hx_this.length = 0;
		__hx_this.__a = new T_c[0];
	}
	#line default
	
	public static object __hx_cast<T_c_c>(global::Array me) {
		#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return ( (( me != null )) ? (me.Array_cast<T_c_c>()) : default(object) );
	}
	#line default
	
	public static int __hx_toString_depth;
	
	public static int __hx_defaultCapacity;
	
	public static global::Array<X> ofNative<X>(X[] native) {
		#line 43 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return new global::Array<X>(((X[]) (native) ));
	}
	#line default
	
	public static global::Array<Y> alloc<Y>(int size) {
		#line 48 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return new global::Array<Y>(((Y[]) (new Y[size]) ));
	}
	#line default
	
	public object Array_cast<T_c>() {
		unchecked {
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (global::haxe.lang.Runtime.eq(typeof(T), typeof(T_c))) {
				#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				return this;
			}
			
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			global::Array<T_c> new_me = new global::Array<T_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			global::Array<string> fields = global::Reflect.fields(this);
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int i = 0;
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			while (( i < fields.length )) {
				#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				string field = fields[i++];
				#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				switch (field) {
					case "__a":
					{
						#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
						if (( this.__a != null )) {
							#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
							T_c[] __temp_new_arr1 = new T_c[this.__a.Length];
							#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
							int __temp_i2 = -1;
							#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
							while ((  ++ __temp_i2 < this.__a.Length )) {
								#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
								object __temp_obj3 = ((object) (this.__a[__temp_i2]) );
								#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
								if (( __temp_obj3 != null )) {
									#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
									__temp_new_arr1[__temp_i2] = global::haxe.lang.Runtime.genericCast<T_c>(__temp_obj3);
								}
								
							}
							
							#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
							new_me.__a = __temp_new_arr1;
						}
						else {
							#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
							new_me.__a = null;
						}
						
						#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
						break;
					}
					
					
					default:
					{
						#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
						global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
						#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
						break;
					}
					
				}
				
			}
			
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return new_me;
		}
		#line default
	}
	
	
	public int length;
	
	public T[] __a;
	
	public global::Array<T> concat(global::Array<T> a) {
		#line 69 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		int len = ( this.length + a.length );
		T[] retarr = new T[len];
		#line 71 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (0) ), ((global::System.Array) (retarr) ), ((int) (0) ), ((int) (this.length) ));
		global::System.Array.Copy(((global::System.Array) (a.__a) ), ((int) (0) ), ((global::System.Array) (retarr) ), ((int) (this.length) ), ((int) (a.length) ));
		#line 74 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return new global::Array<T>(((T[]) (retarr) ));
	}
	#line default
	
	public void concatNative(T[] a) {
		#line 78 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		T[] __a = this.__a;
		int len = ( this.length + ( a as global::System.Array ).Length );
		#line 80 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( ( __a as global::System.Array ).Length >= len )) {
			#line 81 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			global::System.Array.Copy(((global::System.Array) (a) ), ((int) (0) ), ((global::System.Array) (__a) ), ((int) (this.length) ), ((int) (this.length) ));
		}
		else {
			#line 83 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T[] newarr = new T[len];
			global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (this.length) ));
			#line 85 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			global::System.Array.Copy(((global::System.Array) (a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (this.length) ), ((int) (( a as global::System.Array ).Length) ));
			#line 87 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			this.__a = newarr;
		}
		
		#line 90 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		this.length = len;
	}
	#line default
	
	public int indexOf(T x, global::haxe.lang.Null<int> fromIndex) {
		unchecked {
			#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int len = this.length;
			#line 94 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int i = ( ( ! (fromIndex.hasValue) ) ? (0) : ((fromIndex).@value) );
			if (( i < 0 )) {
				#line 96 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				i += len;
				if (( i < 0 )) {
					#line 98 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					i = 0;
				}
				
			}
			else if (( i >= len )) {
				#line 100 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				return -1;
			}
			
			#line 102 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return global::System.Array.IndexOf<T>(((T[]) (this.__a) ), global::haxe.lang.Runtime.genericCast<T>(x), ((int) (i) ), ((int) (( len - i )) ));
		}
		#line default
	}
	
	
	public int lastIndexOf(T x, global::haxe.lang.Null<int> fromIndex) {
		unchecked {
			#line 106 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int len = this.length;
			#line 106 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int i = ( ( ! (fromIndex.hasValue) ) ? (( len - 1 )) : ((fromIndex).@value) );
			if (( i >= len )) {
				#line 108 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				i = ( len - 1 );
			}
			else if (( i < 0 )) {
				#line 110 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				i += len;
				if (( i < 0 )) {
					#line 112 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return -1;
				}
				
			}
			
			#line 114 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return global::System.Array.LastIndexOf<T>(((T[]) (this.__a) ), global::haxe.lang.Runtime.genericCast<T>(x), ((int) (i) ), ((int) (( i + 1 )) ));
		}
		#line default
	}
	
	
	public string @join(string sep) {
		unchecked {
			#line 118 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			global::System.Text.StringBuilder buf_b = new global::System.Text.StringBuilder();
			int i = -1;
			#line 121 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			bool first = true;
			int length = this.length;
			#line 123 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			while ((  ++ i < length )) {
				#line 124 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				if (first) {
					#line 125 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					first = false;
				}
				else {
					#line 127 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					buf_b.Append(((string) (global::Std.@string(sep)) ));
				}
				
				#line 128 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				buf_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.genericCast<T>(this.__a[i]))) ));
			}
			
			#line 131 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return buf_b.ToString();
		}
		#line default
	}
	
	
	public global::haxe.lang.Null<T> pop() {
		#line 135 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		T[] __a = this.__a;
		int length = this.length;
		#line 137 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( length > 0 )) {
			#line 138 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T val = global::haxe.lang.Runtime.genericCast<T>(__a[ -- length]);
			__a[length] = default(T);
			#line 140 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			this.length = length;
			#line 142 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return new global::haxe.lang.Null<T>(val, true);
		}
		else {
			#line 144 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return default(global::haxe.lang.Null<T>);
		}
		
	}
	#line default
	
	public int push(T x) {
		unchecked {
			#line 149 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( this.length >= ( this.__a as global::System.Array ).Length )) {
				#line 150 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				int newLen = ( (( this.length == 0 )) ? (4) : (( this.length << 1 )) );
				T[] newarr = new T[newLen];
				#line 152 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				( this.__a as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
				#line 154 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.__a = newarr;
			}
			
			#line 157 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			this.__a[this.length] = x;
			return  ++ this.length;
		}
		#line default
	}
	
	
	public void reverse() {
		unchecked {
			#line 162 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int i = 0;
			int l = this.length;
			#line 164 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T[] a = this.__a;
			int half = ( l >> 1 );
			#line 166 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			 -- l;
			while (( i < half )) {
				#line 168 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				T tmp = global::haxe.lang.Runtime.genericCast<T>(a[i]);
				a[i] = global::haxe.lang.Runtime.genericCast<T>(a[( l - i )]);
				#line 170 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				a[( l - i )] = tmp;
				 ++ i;
			}
			
		}
		#line default
	}
	
	
	public global::haxe.lang.Null<T> shift() {
		unchecked {
			#line 176 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int l = this.length;
			if (( l == 0 )) {
				#line 178 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				return default(global::haxe.lang.Null<T>);
			}
			
			#line 180 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T[] a = this.__a;
			T x = global::haxe.lang.Runtime.genericCast<T>(a[0]);
			#line 182 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			 -- l;
			global::System.Array.Copy(((global::System.Array) (a) ), ((int) (1) ), ((global::System.Array) (a) ), ((int) (0) ), ((int) (( this.length - 1 )) ));
			#line 184 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			a[l] = default(T);
			this.length = l;
			#line 187 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return new global::haxe.lang.Null<T>(x, true);
		}
		#line default
	}
	
	
	public global::Array<T> slice(int pos, global::haxe.lang.Null<int> end) {
		#line 191 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( pos < 0 )) {
			#line 192 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			pos = ( this.length + pos );
			if (( pos < 0 )) {
				#line 194 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				pos = 0;
			}
			
		}
		
		#line 196 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if ( ! (end.hasValue) ) {
			#line 197 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			end = new global::haxe.lang.Null<int>(this.length, true);
		}
		else if (( (end).@value < 0 )) {
			#line 199 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			end = new global::haxe.lang.Null<int>(( this.length + (end).@value ), true);
		}
		
		#line 200 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( (end).@value > this.length )) {
			#line 201 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			end = new global::haxe.lang.Null<int>(this.length, true);
		}
		
		#line 202 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		int len = ( (end).@value - pos );
		if (( len < 0 )) {
			#line 204 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return new global::Array<T>();
		}
		
		#line 206 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		T[] newarr = new T[len];
		global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (pos) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (len) ));
		#line 209 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return new global::Array<T>(((T[]) (newarr) ));
	}
	#line default
	
	public void sort(global::haxe.lang.Function f) {
		unchecked {
			#line 213 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( this.length == 0 )) {
				#line 214 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				return;
			}
			
			#line 215 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			this.quicksort(0, ( this.length - 1 ), f);
		}
		#line default
	}
	
	
	public void quicksort(int lo, int hi, global::haxe.lang.Function f) {
		unchecked {
			#line 219 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T[] buf = this.__a;
			int i = lo;
			int j = hi;
			#line 221 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T p = global::haxe.lang.Runtime.genericCast<T>(buf[( ( i + j ) >> 1 )]);
			while (( i <= j )) {
				#line 223 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				while (( ( i < hi ) && ( ((int) (f.__hx_invoke2_f(default(double), global::haxe.lang.Runtime.genericCast<T>(buf[i]), default(double), p)) ) < 0 ) )) {
					#line 224 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					 ++ i;
				}
				
				#line 225 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				while (( ( j > lo ) && ( ((int) (f.__hx_invoke2_f(default(double), global::haxe.lang.Runtime.genericCast<T>(buf[j]), default(double), p)) ) > 0 ) )) {
					#line 226 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					 -- j;
				}
				
				#line 227 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				if (( i <= j )) {
					#line 228 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					T t = global::haxe.lang.Runtime.genericCast<T>(buf[i]);
					buf[i++] = global::haxe.lang.Runtime.genericCast<T>(buf[j]);
					#line 230 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					buf[j--] = t;
				}
				
			}
			
			#line 234 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( lo < j )) {
				#line 235 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.quicksort(lo, j, f);
			}
			
			#line 236 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( i < hi )) {
				#line 237 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.quicksort(i, hi, f);
			}
			
		}
		#line default
	}
	
	
	public global::Array<T> splice(int pos, int len) {
		#line 241 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( len < 0 )) {
			#line 242 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return new global::Array<T>();
		}
		
		#line 243 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( pos < 0 )) {
			#line 244 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			pos = ( this.length + pos );
			if (( pos < 0 )) {
				#line 246 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				pos = 0;
			}
			
		}
		
		#line 248 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( pos > this.length )) {
			#line 249 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			pos = 0;
			len = 0;
		}
		else if (( ( pos + len ) > this.length )) {
			#line 252 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			len = ( this.length - pos );
			if (( len < 0 )) {
				#line 254 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				len = 0;
			}
			
		}
		
		#line 256 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		T[] a = this.__a;
		#line 258 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		T[] ret = new T[len];
		global::System.Array.Copy(((global::System.Array) (a) ), ((int) (pos) ), ((global::System.Array) (ret) ), ((int) (0) ), ((int) (len) ));
		#line 260 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		global::Array<T> ret1 = new global::Array<T>(((T[]) (ret) ));
		#line 262 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		int end = ( pos + len );
		global::System.Array.Copy(((global::System.Array) (a) ), ((int) (end) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( this.length - end )) ));
		#line 264 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		this.length -= len;
		while ((  -- len >= 0 )) {
			#line 266 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			a[( this.length + len )] = default(T);
		}
		
		#line 267 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return ret1;
	}
	#line default
	
	public void spliceVoid(int pos, int len) {
		#line 271 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( len < 0 )) {
			#line 272 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return;
		}
		
		#line 273 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( pos < 0 )) {
			#line 274 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			pos = ( this.length + pos );
			if (( pos < 0 )) {
				#line 276 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				pos = 0;
			}
			
		}
		
		#line 278 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( pos > this.length )) {
			#line 279 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			pos = 0;
			len = 0;
		}
		else if (( ( pos + len ) > this.length )) {
			#line 282 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			len = ( this.length - pos );
			if (( len < 0 )) {
				#line 284 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				len = 0;
			}
			
		}
		
		#line 286 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		T[] a = this.__a;
		#line 288 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		int end = ( pos + len );
		global::System.Array.Copy(((global::System.Array) (a) ), ((int) (end) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( this.length - end )) ));
		#line 290 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		this.length -= len;
		while ((  -- len >= 0 )) {
			#line 292 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			a[( this.length + len )] = default(T);
		}
		
	}
	#line default
	
	public string toString() {
		unchecked {
			#line 296 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( global::Array<object>.__hx_toString_depth >= 5 )) {
				#line 297 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				return "...";
			}
			
			#line 299 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			 ++ global::Array<object>.__hx_toString_depth;
			try {
				#line 301 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				string s = this.__hx_toString();
				 -- global::Array<object>.__hx_toString_depth;
				#line 303 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				return s;
			}
			catch (global::System.Exception _g){
				#line 304 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				object e = ((object) (global::haxe.Exception.caught(_g).unwrap()) );
				 -- global::Array<object>.__hx_toString_depth;
				#line 306 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(e)) );
			}
			
			
		}
		#line default
	}
	
	
	public string __hx_toString() {
		#line 312 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		global::System.Text.StringBuilder ret_b = new global::System.Text.StringBuilder();
		T[] a = this.__a;
		#line 314 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		ret_b.Append(((string) ("[") ));
		bool first = true;
		#line 316 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		{
			#line 316 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int _g = 0;
			#line 316 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int _g1 = this.length;
			#line 316 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			while (( _g < _g1 )) {
				#line 316 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				int i = _g++;
				if (first) {
					#line 318 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					first = false;
				}
				else {
					#line 320 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					ret_b.Append(((string) (",") ));
				}
				
				#line 321 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				ret_b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.genericCast<T>(a[i]))) ));
			}
			
		}
		
		#line 324 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		ret_b.Append(((string) ("]") ));
		return ret_b.ToString();
	}
	#line default
	
	public void unshift(T x) {
		unchecked {
			#line 329 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T[] __a = this.__a;
			int length = this.length;
			#line 331 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( length >= ( __a as global::System.Array ).Length )) {
				#line 332 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				int newLen = ( (( length << 1 )) + 1 );
				T[] newarr = new T[newLen];
				#line 334 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (1) ), ((int) (length) ));
				#line 336 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.__a = newarr;
			}
			else {
				#line 338 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (__a) ), ((int) (1) ), ((int) (length) ));
			}
			
			#line 341 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			this.__a[0] = x;
			 ++ this.length;
		}
		#line default
	}
	
	
	public void insert(int pos, T x) {
		unchecked {
			#line 346 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int l = this.length;
			if (( pos < 0 )) {
				#line 348 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				pos = ( l + pos );
				if (( pos < 0 )) {
					#line 350 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					pos = 0;
				}
				
			}
			
			#line 352 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( pos >= l )) {
				#line 353 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.push(x);
				return;
			}
			else if (( pos == 0 )) {
				#line 356 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.unshift(x);
				return;
			}
			
			#line 360 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( l >= ( this.__a as global::System.Array ).Length )) {
				#line 361 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				int newLen = ( (( this.length << 1 )) + 1 );
				T[] newarr = new T[newLen];
				#line 363 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (pos) ));
				newarr[pos] = x;
				#line 365 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				global::System.Array.Copy(((global::System.Array) (this.__a) ), ((int) (pos) ), ((global::System.Array) (newarr) ), ((int) (( pos + 1 )) ), ((int) (( l - pos )) ));
				#line 367 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.__a = newarr;
				 ++ this.length;
			}
			else {
				#line 370 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				T[] __a = this.__a;
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (pos) ), ((global::System.Array) (__a) ), ((int) (( pos + 1 )) ), ((int) (( l - pos )) ));
				#line 372 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (__a) ), ((int) (0) ), ((int) (pos) ));
				__a[pos] = x;
				#line 374 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				 ++ this.length;
			}
			
		}
		#line default
	}
	
	
	public bool @remove(T x) {
		unchecked {
			#line 379 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T[] __a = this.__a;
			int i = -1;
			#line 381 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int length = this.length;
			while ((  ++ i < length )) {
				#line 383 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				if (global::haxe.lang.Runtime.eq(global::haxe.lang.Runtime.genericCast<T>(__a[i]), x)) {
					#line 384 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (( i + 1 )) ), ((global::System.Array) (__a) ), ((int) (i) ), ((int) (( ( length - i ) - 1 )) ));
					__a[ -- this.length] = default(T);
					#line 387 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return true;
				}
				
			}
			
			#line 391 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return false;
		}
		#line default
	}
	
	
	public global::Array<S> map<S>(global::haxe.lang.Function f) {
		#line 395 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		global::Array<S> ret = new global::Array<S>(((S[]) (new S[this.length]) ));
		{
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int _g = 0;
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int _g1 = this.length;
			#line 396 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			while (( _g < _g1 )) {
				#line 396 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				int i = _g++;
				{
					#line 397 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					S val = global::haxe.lang.Runtime.genericCast<S>(f.__hx_invoke1_o(default(double), global::haxe.lang.Runtime.genericCast<T>(this.__a[i])));
					#line 397 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					ret.__a[i] = val;
				}
				
			}
			
		}
		
		#line 398 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return ret;
	}
	#line default
	
	public bool contains(T x) {
		unchecked {
			#line 402 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			T[] __a = this.__a;
			int i = -1;
			#line 404 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int length = this.length;
			while ((  ++ i < length )) {
				#line 406 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				if (global::haxe.lang.Runtime.eq(global::haxe.lang.Runtime.genericCast<T>(__a[i]), x)) {
					#line 407 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return true;
				}
				
			}
			
			#line 409 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return false;
		}
		#line default
	}
	
	
	public global::Array<T> filter(global::haxe.lang.Function f) {
		#line 413 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		global::Array<T> ret = new global::Array<T>(new T[]{});
		{
			#line 414 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int _g = 0;
			#line 414 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			int _g1 = this.length;
			#line 414 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			while (( _g < _g1 )) {
				#line 414 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				int i = _g++;
				T elt = global::haxe.lang.Runtime.genericCast<T>(this.__a[i]);
				#line 416 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				if (global::haxe.lang.Runtime.toBool(f.__hx_invoke1_o(default(double), elt))) {
					#line 417 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					ret.push(elt);
				}
				
			}
			
		}
		
		#line 419 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return ret;
	}
	#line default
	
	public global::Array<T> copy() {
		#line 423 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		int len = this.length;
		T[] __a = this.__a;
		#line 425 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		T[] newarr = new T[len];
		global::System.Array.Copy(((global::System.Array) (__a) ), ((int) (0) ), ((global::System.Array) (newarr) ), ((int) (0) ), ((int) (len) ));
		#line 427 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return new global::Array<T>(((T[]) (newarr) ));
	}
	#line default
	
	public global::haxe.iterators.ArrayIterator<T> iterator() {
		#line 431 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return new global::haxe.iterators.ArrayIterator<T>(((global::Array<T>) (this) ));
	}
	#line default
	
	public global::haxe.iterators.ArrayKeyValueIterator<T> keyValueIterator() {
		#line 436 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return new global::haxe.iterators.ArrayKeyValueIterator<T>(((global::Array<T>) (this) ));
	}
	#line default
	
	public void resize(int len) {
		#line 440 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( this.length < len )) {
			#line 441 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( ( this.__a as global::System.Array ).Length < len )) {
				#line 442 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				global::System.Array.Resize<T>(ref this.__a, ((int) (len) ));
			}
			
			#line 444 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			this.length = len;
		}
		else if (( this.length > len )) {
			#line 446 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			this.spliceVoid(len, ( this.length - len ));
		}
		
	}
	#line default
	
	public T __get(int idx) {
		#line 451 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		if (( ((uint) (idx) ) >= this.length )) {
			#line 451 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return default(T);
		}
		else {
			#line 451 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return global::haxe.lang.Runtime.genericCast<T>(this.__a[idx]);
		}
		
	}
	#line default
	
	public T __set(int idx, T v) {
		unchecked {
			#line 455 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			uint idx1 = ((uint) (idx) );
			T[] __a = this.__a;
			#line 457 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( idx1 >= ( __a as global::System.Array ).Length )) {
				#line 458 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				uint len = ((uint) (( idx1 + 1 )) );
				if (( idx1 == ( __a as global::System.Array ).Length )) {
					#line 460 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					len = ((uint) (( (( idx1 << 1 )) + 1 )) );
				}
				
				#line 461 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				T[] newArr = new T[((int) (len) )];
				( __a as global::System.Array ).CopyTo(((global::System.Array) (newArr) ), ((int) (0) ));
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				__a = newArr;
				#line 463 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.__a = __a;
			}
			
			#line 466 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			if (( idx1 >= this.length )) {
				#line 467 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
				this.length = ((int) (((uint) (( idx1 + 1 )) )) );
			}
			
			#line 469 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return __a[((int) (idx1) )] = v;
		}
		#line default
	}
	
	
	public T __unsafe_get(int idx) {
		#line 473 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return global::haxe.lang.Runtime.genericCast<T>(this.__a[idx]);
	}
	#line default
	
	public T __unsafe_set(int idx, T val) {
		#line 477 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		return this.__a[idx] = val;
	}
	#line default
	
	public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
		unchecked {
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			switch (hash) {
				case 520590566:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.length = ((int) (@value) );
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return @value;
				}
				
				
				default:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return base.__hx_setField_f(field, hash, @value, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
		unchecked {
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			switch (hash) {
				case 4745537:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.__a = ((T[]) (@value) );
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return @value;
				}
				
				
				case 520590566:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.length = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return @value;
				}
				
				
				default:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return base.__hx_setField(field, hash, @value, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
		unchecked {
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			switch (hash) {
				case 1621420777:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__unsafe_set", 1621420777)) );
				}
				
				
				case 1620824029:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__unsafe_get", 1620824029)) );
				}
				
				
				case 1916009602:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__set", 1916009602)) );
				}
				
				
				case 1915412854:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "__get", 1915412854)) );
				}
				
				
				case 142301684:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "resize", 142301684)) );
				}
				
				
				case 1257164128:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "keyValueIterator", 1257164128)) );
				}
				
				
				case 328878574:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "iterator", 328878574)) );
				}
				
				
				case 1103412149:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "copy", 1103412149)) );
				}
				
				
				case 87367608:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "filter", 87367608)) );
				}
				
				
				case 746281503:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "contains", 746281503)) );
				}
				
				
				case 5442204:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "map", 5442204)) );
				}
				
				
				case 76061764:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "remove", 76061764)) );
				}
				
				
				case 501039929:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "insert", 501039929)) );
				}
				
				
				case 2025055113:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "unshift", 2025055113)) );
				}
				
				
				case 946786476:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
				}
				
				
				case 1352786672:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "spliceVoid", 1352786672)) );
				}
				
				
				case 1067353468:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "splice", 1067353468)) );
				}
				
				
				case 1282943179:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "quicksort", 1282943179)) );
				}
				
				
				case 1280845662:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "sort", 1280845662)) );
				}
				
				
				case 2127021138:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "slice", 2127021138)) );
				}
				
				
				case 2082663554:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "shift", 2082663554)) );
				}
				
				
				case 452737314:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "reverse", 452737314)) );
				}
				
				
				case 1247875546:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "push", 1247875546)) );
				}
				
				
				case 5594513:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "pop", 5594513)) );
				}
				
				
				case 1181037546:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "join", 1181037546)) );
				}
				
				
				case 359333139:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "lastIndexOf", 359333139)) );
				}
				
				
				case 1623148745:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "indexOf", 1623148745)) );
				}
				
				
				case 1532710347:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "concatNative", 1532710347)) );
				}
				
				
				case 1204816148:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "concat", 1204816148)) );
				}
				
				
				case 4745537:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.__a;
				}
				
				
				case 520590566:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.length;
				}
				
				
				default:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
		unchecked {
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			switch (hash) {
				case 520590566:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return ((double) (this.length) );
				}
				
				
				default:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_invokeField(string field, int hash, object[] dynargs) {
		unchecked {
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			switch (hash) {
				case 1621420777:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.__unsafe_set(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.genericCast<T>(dynargs[1]));
				}
				
				
				case 1620824029:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.__unsafe_get(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
				}
				
				
				case 1916009602:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.__set(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.genericCast<T>(dynargs[1]));
				}
				
				
				case 1915412854:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.__get(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
				}
				
				
				case 142301684:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.resize(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 1257164128:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.keyValueIterator();
				}
				
				
				case 328878574:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.iterator();
				}
				
				
				case 1103412149:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.copy();
				}
				
				
				case 87367608:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.filter(((global::haxe.lang.Function) (dynargs[0]) ));
				}
				
				
				case 746281503:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.contains(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]));
				}
				
				
				case 5442204:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.map<object>(((global::haxe.lang.Function) (dynargs[0]) ));
				}
				
				
				case 76061764:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.@remove(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]));
				}
				
				
				case 501039929:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.insert(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Runtime.genericCast<T>(dynargs[1]));
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 2025055113:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.unshift(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]));
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 946786476:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.toString();
				}
				
				
				case 1352786672:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.spliceVoid(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 1067353468:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.splice(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
				}
				
				
				case 1282943179:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.quicksort(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((global::haxe.lang.Function) (dynargs[2]) ));
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 1280845662:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.sort(((global::haxe.lang.Function) (dynargs[0]) ));
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 2127021138:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.slice(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), global::haxe.lang.Null<object>.ofDynamic<int>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
				}
				
				
				case 2082663554:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return (this.shift()).toDynamic();
				}
				
				
				case 452737314:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.reverse();
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 1247875546:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.push(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]));
				}
				
				
				case 5594513:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return (this.pop()).toDynamic();
				}
				
				
				case 1181037546:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.@join(global::haxe.lang.Runtime.toString(dynargs[0]));
				}
				
				
				case 359333139:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.lastIndexOf(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]), global::haxe.lang.Null<object>.ofDynamic<int>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
				}
				
				
				case 1623148745:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.indexOf(global::haxe.lang.Runtime.genericCast<T>(dynargs[0]), global::haxe.lang.Null<object>.ofDynamic<int>(( (( dynargs.Length > 1 )) ? (dynargs[1]) : (null) )));
				}
				
				
				case 1532710347:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					this.concatNative(((T[]) (dynargs[0]) ));
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					break;
				}
				
				
				case 1204816148:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return this.concat(((global::Array<T>) (global::Array<object>.__hx_cast<T>(((global::Array) (dynargs[0]) ))) ));
				}
				
				
				default:
				{
					#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
					return base.__hx_invokeField(field, hash, dynargs);
				}
				
			}
			
			#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
			return null;
		}
		#line default
	}
	
	
	public override void __hx_getFields(global::Array<string> baseArr) {
		#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		baseArr.push("__a");
		#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		baseArr.push("length");
		#line 29 "C:\\HaxeToolkit\\haxe\\std\\cs\\_std\\Array.hx"
		base.__hx_getFields(baseArr);
	}
	#line default
	
	public T this[int index]{
		get{
			return this.__get(index);
		}
		set{
			this.__set(index,value);
		}
	}
	object global::Array.this[int key]{
		get{
			return ((object) this.__get(key));
		}
		set{
			this.__set(key, (T) value);
		}
	}
	
	
	public override string ToString(){
		return this.toString();
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
[global::haxe.lang.GenericInterface(typeof(global::Array<object>))]
public interface Array : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
	
	object Array_cast<T_c>();
	
	string @join(string sep);
	
	void reverse();
	
	void spliceVoid(int pos, int len);
	
	string toString();
	
	string __hx_toString();
	
	void resize(int len);
	
	object this[int key]{
		get;
		set;
	}
	
	
}


